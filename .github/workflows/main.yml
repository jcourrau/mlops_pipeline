# .github/workflows/ci.yml

name: CI model to Dockerhub

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  retraining_model:
    runs-on: ubuntu-latest
    container: docker://dvcorg/cml:latest
    env:
      repo_token: ${{ secrets.GH_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - uses: actions/checkout@v4

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install requirements
        run: pip3 install -r requirements.txt

      - name: Download data from S3
        run: python3 src/download_data.py

      - name: Check if loan_data.csv exists
        run: |
          if [ -f "./data/loan_data.csv" ]; then
            echo "Data file exists"
          else
            echo "Data file missing"
            exit 1
          fi

      - name: Configure remote DVC
        run: |
          dvc remote add -f data-versioning s3://jason-mlops/data-versioning/
          dvc remote modify data-versioning region us-east-2
          
          dvc remote add -f model-versioning s3://jason-mlops/model-versioning/
          dvc remote modify model-versioning region us-east-2

      # Access for dvc to local repo
      - name: Make repo as safe
        run: |
          git config --global --add safe.directory /__w/mlops_pipeline/mlops_pipeline

      # retraining.py should call your train.py and evaluate.py
      - name: Execute the training pipeline
        run: |
          python3 src/train
          python3 src/evaluate

      - name: List models folder
        run: |
          echo ">> Listing files in $(pwd)/models"
          ls -R models || echo "models folder doesnt exist."

      - name: Generating report
        run: |
          echo "## Model metrics" > report.md
          cat reports/metrics.txt >> report.md
      
          echo "## Data visualization" >> report.md
          cml-publish reports/feature_importance.png --md >> report.md

          cml-send-comment report.md

      - name: Track dataset with DVC
        run: |
          VERSION=$(git tag | grep ^v | sort -V | tail -n 1 | sed 's/v//' || echo "0" )
          NEXT_VERSION=$((VERSION +1))
          
          dvc add data/loan_data.csv
          dvc add models/loan_pipeline.pkl
          
          git config --global user.email "jasoncourrau@gmail.com"
          git config --global user.name "Jason"
          
          git add data/loan_data.csv.dvc .gitignore
          git add models/loan_pipeline.pkl.dvc .gitignore
          
          
          git commit -m "Auto-track dataset via DVC - Version v$NEXT_VERSION"

      - name: Push dataset to S3 via DVC
        run: |
          dvc push -r data-versioning
          dvc push -r model-versioning

  build_docker_image:
    needs: retraining_model
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker image tag
        id: vars
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        run: |
          docker build \
          --build-arg GIT_COMMIT=${{ env.IMAGE_TAG }} \
          --build-arg BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
           --no-cache -t ${{ secrets.DOCKER_USERNAME }}/loan-app:${{ env.IMAGE_TAG }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/loan-app:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/loan-app:latest

      - name: Push to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/loan-app:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/loan-app:latest

      - name: Login into the server
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo systemctl enable --now docker      # arranca Docker si no estÃ¡ corriendo
            sudo docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}'
            if sudo docker ps --all | grep loan-app; then
              sudo docker stop loan-app
              sudo docker rm loan-app
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/loan-app:${{ env.IMAGE_TAG }}
            sudo docker run -d --name loan-app -p 8501:8501 ${{ secrets.DOCKER_USERNAME }}/loan-app:${{ env.IMAGE_TAG }}
            sudo docker system prune -af --volumes
            

  update_Nginx_config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check if Nginx config changed
        id: check_changes
        run: |
          git fetch origin develop
          if git diff --name-only origin/develop | grep -q 'mlops.cent-0.com.conf'; then
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Upload Nginx config file
        if: env.changed == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "mlops.cent-0.com.conf"
          target: "/home/ec2-user/mlops.cent-0.com.conf"

      - name: Move and apply Nginx config
        if: env.changed == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo mv /home/ec2-user/mlops.cent-0.com.conf /etc/nginx/conf.d/mlops.cent-o.com.conf
            sudo nginx -t
            sudo systemctl reload nginx

